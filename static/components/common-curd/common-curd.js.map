{"version":3,"sources":["/components/common-curd/common-curd.ts"],"names":[],"mappings":"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","file":"common-curd.js","sourcesContent":["import * as avalon from 'avalon2';\n\nimport { createForm, notification, message } from \"ane\";\n\nexport default avalon.component('common-curd', {\n    template: '&nbsp;',\n    defaults: {\n        show: false,\n        loading: false,\n        list: [],\n        $searchForm: createForm({ autoAsyncChange: false }),\n        pagination: {\n            current: 1, pageSize: 6, total: 0\n        },\n        $dialogs: {\n            main: null\n        },\n        search() {\n            this.$searchForm.validateFields().then(isAllValid => {\n                if (isAllValid) {\n                    this.fetch();\n                }\n            });\n        },\n        fetch() {\n            const page = {\n                start: this.pagination.pageSize * (this.pagination.current - 1),\n                limit: this.pagination.pageSize\n            };\n            this.loading = true;\n            this.$store.fetch({...this.$searchForm.record, ...page}).then(data => {\n                this.pagination.total = data.total;\n                this.list = data.list;\n                this.loading = false;\n            }, () => {\n                this.loading = false;\n            });\n        },\n        handleTableChange(pagination) {\n            this.pagination.current = pagination.current;\n            this.fetch();\n        },\n        handle: {},\n        _handle: {\n            add(text, record, index) {\n                this.$dialogs.main.beginCreate(this.$store.initialData());\n                this.show = true;\n            },\n            edit(text, record, index) {\n                this.$dialogs.main.beginUpdate(record);\n                this.show = true;\n            },\n            del(text, record, index) {\n                this.$store.remove(record.region_id).then(result => {\n                    if (result.code === '0') {\n                        message.success({\n                            content: '删除成功'\n                        });\n                    }\n                });\n            },\n        },\n        actions(type, ...args) {\n            this.handle[type] && this.handle[type].apply(this, args);\n        },\n        handleOk() {\n            this.$dialogs.main.submit().then(([isEdit, record]) => {\n                if (typeof isEdit === 'boolean') {\n                    this.show = false;\n                    if (isEdit) {\n                        return this.$store.update(record);\n                    } else {\n                        return this.$store.create(record);\n                    }\n                }\n            }).then(result => {\n                if (result !== undefined && result.code === '0') {\n                    this.fetch();\n                }\n            }).catch(err => {\n                avalon.log(err);\n            });\n        },\n        _initMainDialog() {\n            if (this.$dialogs.main === null) {\n                this.$dialogs.main = avalon.define({\n                    $id: this.$id + '_dialog_main',\n                    title: '新增',\n                    isEdit: false,\n                    $form: createForm({\n                        record: this.$store.initialData()\n                    }),\n                    record: this.$store.initialData(),\n                    beginCreate(record) {\n                        this.isEdit = false;\n                        this.title = '新增';\n                        this.record = record;\n                    },\n                    beginUpdate(record) {\n                        this.isEdit = true;\n                        this.title = '修改';\n                        this.record = record;\n                    },\n                    submit() {\n                        return this.$form.validateFields().then(isAllValid => {\n                            if (isAllValid) {\n                                return [this.isEdit, this.$form.record];\n                            } else {\n                                return Promise.reject('表单验证未通过');\n                            }\n                        })\n                    }\n                });\n            }\n        },\n        _disposeDialogs() {\n            Object.keys(this.$dialogs).map(name => {\n                let dialog = this.$dialogs[name];\n                dialog && delete avalon.vmodels[dialog.$id];\n            });\n        },\n        onInit(event) {\n            this.fetch();\n            this._initMainDialog();\n            this.handle = avalon.mix(this._handle, this.handle);\n        },\n        onDispose(event) {\n            this._disposeDialogs();\n        }\n    }\n});"]}
{"version":3,"sources":["/components/gf-demo-redux/gf-demo-redux.ts"],"names":[],"mappings":"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","file":"gf-demo-redux.js","sourcesContent":["import * as avalon from 'avalon2';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport * as beyond from '../../vendor/beyond';\n\nimport { createForm, message } from \"ane\";\n\nimport { demo as demoStore } from '../../services/storeService';\n\nexport const name = 'gf-demo-redux';\n\nfunction fetch(params) {\n    return (dispatch, getState) => {\n        const { page, pageSize, search } = getState().region;\n        demoStore.fetch({\n            ...search,\n            start: pageSize * (params.page - 1),\n            limit: pageSize\n        }).then(data => {\n            dispatch({\n                type: 'region/fetch',\n                payload: {\n                    list: data.list,\n                    total: data.total,\n                    page: params.page || page\n                }\n            });\n        });\n    }\n}\nfunction insert(params?) {\n    return (dispatch, getState) => {\n        const { page, record } = getState().region;\n        demoStore.create(record).then(data => {\n            dispatch({ type: 'region/closeDialog' });\n            dispatch(fetch({ page }));\n        });\n    }\n}\nfunction update(params?) {\n    return (dispatch, getState) => {\n        const { page, record } = getState().region;\n        demoStore.update(record).then(data => {\n            dispatch(fetch({ page }));\n        });\n    }\n}\nfunction del(params) {\n    return (dispatch, getState) => {\n        const { page } = getState().region;\n        demoStore.remove(params).then(result => {\n            if (result.code === '0') {\n                message.success({\n                    content: '删除成功'\n                });\n            }\n            dispatch(fetch({ page }));\n        });\n    }\n}\n\ninterface RegionEntity {\n    region_id: string,\n    region_name: string,\n    region_parent_id: string,\n    suites: {\n        name: string\n    }[]\n}\n\ninterface Region {\n    show: boolean,\n    isEdit: boolean,\n    list: RegionEntity[],\n    total: number,\n    page: number,\n    pageSize: number,\n    search: {\n        region_id: string,\n        region_name: {\n            firstName: string\n        },\n        startDate: string,\n        endDate: string\n    },\n    record: RegionEntity\n}\ninterface All {\n    region: Region\n}\n\nconst region = function regionReducer(state: Region, action): Region {\n    if (state === undefined) {\n        state = {\n            show: false,\n            isEdit: false,\n            list: [],\n            total: 0,\n            page: 1,\n            pageSize: 6,\n            search: null,\n            record: null\n        };\n    }\n    switch (action.type) {\n        case 'region/closeDialog':\n            return {\n                ...state,\n                show: false\n            };\n        case 'region/fetch':\n            return {\n                ...state,\n                ...action.payload\n            };\n        case 'region/readyForAdd':\n            return {\n                ...state,\n                isEdit: false,\n                show: true\n            };\n        case 'region/readyForEdit':\n            return {\n                ...state,\n                isEdit: true,\n                show: true\n            };\n        case 'region/changeSearch':\n            return {\n                ...state,\n                search: action.payload\n            }\n        case 'region/changeRecord':\n            return {\n                ...state,\n                record: action.payload\n            }\n        default:\n            return state;\n    }\n}\nconst store = createStore<All>(\n    combineReducers<All>({\n        region\n    }), \n    global.__REDUX_DEVTOOLS_EXTENSION__ && global.__REDUX_DEVTOOLS_EXTENSION__(),\n    applyMiddleware(thunk)\n);\n\navalon.component(name, {\n    template: __inline('./gf-demo-redux.html'),\n    defaults: {\n        show: false,\n        isEdit: false,\n        list: [],\n        $searchForm: createForm({\n            onFieldsChange(fields, record) {\n                store.dispatch({ type: 'region/changeSearch', payload: record });\n            }\n        }),\n        pagination: {\n            current: 1, total: 0, pageSize: 6\n        },\n        pattern: /^\\d+-\\d+-\\d+( \\d+:\\d+:\\d+)?$/,\n        search() {\n            this.fetch();\n        },\n        fetch(params = {}) {\n            store.dispatch(fetch(params));\n        },\n        actions(type, text, record, index) {\n            if (type === 'add') {\n                form.title = '新增';\n                form.record = demoStore.initialData();\n                store.dispatch({ type: 'region/readyForAdd' });\n            } else if (type === 'edit') {\n                form.title = '修改';\n                form.record = record;\n                store.dispatch({ type: 'region/readyForEdit' });\n            } else if (type === 'delete') {\n                store.dispatch(del(record.region_id));\n            }\n        },\n        handleOk() {\n            form.$form.validateFields().then(isAllValid => {\n                if (isAllValid) {\n                    if (this.isEdit) {\n                        store.dispatch(update());\n                    } else {\n                        store.dispatch(insert());\n                    }\n                    store.dispatch({ type: 'region/closeDialog' });\n                }\n            })\n        },\n        handleCancel() {\n            store.dispatch({ type: 'region/closeDialog' });\n        },\n        handleTableChange(pagination) {\n            this.fetch({ page: pagination.current });\n        },\n        mapStateToVm() {\n            const {\n                show, isEdit, list, total, page, pageSize, search, record\n            } = store.getState().region;\n            this.list = list;\n            this.pagination.total = total;\n            this.pagination.current = page;\n            this.pagination.pageSize = pageSize;\n            this.isEdit = isEdit;\n            this.show = show;\n        },\n        onInit(event) {\n            this.mapStateToVm();\n            store.subscribe(() => {\n                this.mapStateToVm();\n            });\n            this.fetch();\n        },\n        onReady(event) {\n        }\n    }\n});\nconst form = avalon.define({\n    $id: 'demo_redux_form',\n    title: '',\n    $form: createForm({\n        record: demoStore.initialData(),\n        onFieldsChange(fields, record) {\n            //avalon.mix(form.record, record);\n            store.dispatch({ type: 'region/changeRecord', payload: record });\n        }\n    }),\n    record: demoStore.initialData()\n});"]}
{"version":3,"sources":["/services/ajaxService.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,EAAmC;AAGnC,2BAAmC;AACnC,iDAA6C;AAW7C,wBAAwB;AACxB,CAAC,CAAC,QAAQ,CAAC,CAAC,YAAkC;IAC1C,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;QACrB,EAAE,CAAC,CAAC,QAAQ,CAAC,QAA8D;YACvE,IAAI,MAAM,GAAI,GAAW,CAAC,YAAY,CAAC;YACvC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,IAAI,IAAI,EAAuB;gBAC/C,OAAO,CAAC,OAAO,CAAC,mBAAmB,EAAE,UAAgB;oBAChD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;wBACT,MAAM,CAAC,EAA8B;oBACzC,CAAC;gBACN,CAAC,CAAC,CAAC;YACP,CAAC;YAAC,CAAwB;gBACtB,kBAAY,CAAC,CAAM;oBACf,OAAO,EAAE,MAAM,CAAC,KAAK,CAAQ;iBAChC,CAAC,CAAC;YACP,CAAC;QACL,CAAC;IACL,CAAC;IAAC,CAAoC;IACtC,CAAC;IAAC,CAAM;QACJ,EAAmB;YACf,OAAO,EAAE,aAAa;SACzB,CAAC,CAAC;IACP,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,GAAgC;IAC5B,IAAM,cAAc,GAAG;QACnB,QAAQ,EAAE,MAAM;QAChB,KAAK,EAAE,KAAK;QACZ,KAAK,EAAE,MAAU;QACjB,aAAa,EAAE,GAAS;KAC3B,CAAC;IACF,EAA4C;IAC5C,OAAO,CAAC,GAAG,GAAG,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAA0C;IAErF,EAAE,CAAC,CAAC,0BAAU,CAAC,CAAC,CAAC;QACb,cAAc,CAAC,QAAQ,GAAG,GAAQ;QAClC,OAAO,CAAC,IAAI,CAAC,gBAAgB,GAAG,EAAW;IAC/C,CAAC;IAED,CAAuE;AAC3E,CAAC;;AAhBD,0BAgBC;AAAA,CAAC;AAEF,CAAa;AACb,aAAyB;IACrB,IAAM,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;IACpB,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,CAAY;QACzB,GAAG,CAAC,IAAI,GAAG;YACP,KAAK,EAAE,CAAc;YACrB,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,EAAE;SACzB,CAAC;QACF,EAAiB;QACjB,OAAO,GAAG,CAAC,KAAK,CAAC;IACrB,CAAC;IACD,CAAO;QACH,IAA2B;KAC9B,CAAC;AACN,CAAC;AAED,CAAc;AACd,cAA0B;IACtB,IAAI,GAAG,GAAiB,EAAE,CAAC;IAC3B,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACT,GAAG,GAAG,CAAC,CAAC;QACR,GAAG,CAAC,IAAW;QACf,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,EAAK;QAClB,OAAO,GAAG,CAAC,IAAI,CAAC;IACpB,CAAC;IAAC,CAAM;QACJ,EAAe;YACX,GAAG,CAAC,IAAI,GAAO;YACf,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC;QACjB,CAAC;QAAC,CAAM;YACJ,EAAe;YACf,GAAG,CAAC,OAAO,GAAG,CAAqB;QACvC,CAAC;IACL,CAAC;IACD,CAAW;AACf,CAAC","file":"ajaxService.js","sourcesContent":["import * as avalon from 'avalon2';\r\nimport * as bootbox from 'bootbox';\r\nimport * as beyond from '../vendor/beyond';\r\n\r\nimport { notification } from 'ane';\r\nimport { serviceUrl } from './configService';\r\n\r\ninterface ResponseData {\r\n    code?: string,\r\n    list?: any[],\r\n    rows?: any[],\r\n    data?: any,\r\n    message?: string,\r\n    total?: number\r\n}\r\n\r\n// 拦截ajax请求，检测是否超时，以重新登录\r\n$(document).ajaxComplete((event, xhr, settings) => {\r\n    if (xhr.status === 200) {\r\n        if (settings.dataType === 'json' && (xhr as any).responseJSON !== void 0) {\r\n            let result = (xhr as any).responseJSON;\r\n            if (result.code === '20' || result.code === '21') {\r\n                bootbox.confirm(\"Session已经失效，请重新登录\", function (result) {\r\n                     if (result) {\r\n                         global.location.href = \"/login.html\";\r\n                     }\r\n                });\r\n            } else if (result.error) {\r\n                notification.error({\r\n                    message: result.error.message\r\n                });\r\n            }\r\n        }\r\n    } else if (xhr.status === undefined) {\r\n    } else {\r\n        notification.error({\r\n            message: '请求错误，请联系管理员'\r\n        });\r\n    }\r\n});\r\n\r\nexport default function (options) {\r\n    const defaultOptions = {\r\n        dataType: 'json',\r\n        cache: false,\r\n        jsonp: 'callback',\r\n        jsonpCallback: 'success'\r\n    };\r\n    options.data = processRequest(options.data);\r\n    options.url = /^\\w+:\\/\\//.test(options.url) ? options.url : serviceUrl + options.url;\r\n    \r\n    if (serviceUrl) {\r\n        defaultOptions.dataType = 'jsonp';\r\n        options.data.jsonp_param_name = 'callback';\r\n    }\r\n    \r\n    return $.ajax({ ...defaultOptions, ...options }).then(processResponse);\r\n};\r\n\r\n// 标准化传给后台的参数\r\nfunction processRequest(r) {\r\n    const str = r || {};\r\n    if (str.start || str.limit) {\r\n        str.page = {\r\n            start: str.start || 0,\r\n            limit: str.limit || 15\r\n        };\r\n        delete str.start;\r\n        delete str.limit;\r\n    }\r\n    return {\r\n        params: JSON.stringify(str)\r\n    };\r\n}\r\n\r\n// 标准化后台相应数据格式\r\nfunction processResponse(r) {\r\n    let str: ResponseData = {};\r\n    if (r.rows) {\r\n        str = r;\r\n        str.code = '0';\r\n        str.list = r.rows;\r\n        delete str.rows;\r\n    } else {\r\n        if (!r.error) {\r\n            str.code = '0';\r\n            str.data = r;\r\n        } else {\r\n            str.code = '1';\r\n            str.message = r.message || r.error;\r\n        }\r\n    }\r\n    return str;\r\n}"]}
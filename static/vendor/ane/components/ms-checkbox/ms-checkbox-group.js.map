{"version":3,"sources":["/vendor/ane/components/ms-checkbox/ms-checkbox-group.ts"],"names":[],"mappings":";;;AACA,oDAAqD;AACrD,0CAAkD;AAElD,yBAAuB;AAEvB,uBAAgB,CAAC,MAAM,CAAC;IACpB,WAAW,EAAE,mBAAmB;IAChC,QAAQ,EAAE,QAAQ,CAAC,0BAA0B,CAAC;IAC9C,QAAQ,EAAE;QACN,KAAK,EAAE,EAAE;QACT,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,EAAE;QACX,SAAS,EAAE,EAAE;QACb,YAAY,YAAC,MAAM;YACf,IAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACzD,EAAE,CAAC,CAAC,WAAW,KAAK,CAAC,CAAE,CAAC,CAAC,CAAC;gBACtB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACtC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACxC,CAAC;YACD,IAAI,CAAC,YAAY,CAAC;gBACd,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE;gBAC1C,IAAI,EAAE,gBAAgB;aACzB,CAAC,CAAC;QACP,CAAC;QACD,mBAAmB,YAAC,KAAK;YACrB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,WAAC,IAAI,YAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,EAAvB,CAAuB,CAAC,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC,CAAC,KAAK,EAAP,CAAO,CAAC,CAAC;QACzF,CAAC;QACD,MAAM,YAAC,KAAK;YAAZ,iBAWC;YAVG,sBAAc,CAAC,IAAI,CAAC,CAAC;YACrB,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,WAAC;gBAClB,KAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;gBAC5B,KAAI,CAAC,YAAY,CAAC;oBACd,MAAM,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,EAAE;oBAC7B,YAAY,EAAE,IAAI;oBAClB,IAAI,EAAE,gBAAgB;iBACzB,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,CAAC;QACD,OAAO,YAAC,KAAK;YACT,gDAAgD;QACpD,CAAC;QACD,SAAS,YAAC,KAAK;QACf,CAAC;KACJ;CACJ,CAAC,CAAC","file":"ms-checkbox-group.js","sourcesContent":["import * as avalon from 'avalon2';\nimport controlComponent from '../ms-form/ms-control';\nimport { emitToFormItem } from '../ms-form/utils';\nimport { findParentComponent } from '../../ane-util';\nimport './ms-checkbox';\n\ncontrolComponent.extend({\n    displayName: 'ms-checkbox-group',\n    template: __inline('./ms-checkbox-group.html'),\n    defaults: {\n        value: [],\n        disabled: false,\n        options: [],\n        selection: [],\n        toggleOption(option) {\n            const optionIndex = this.selection.indexOf(option.value);\n            if (optionIndex === -1 ) {\n                this.selection.push(option.value);\n            } else {\n                this.selection.remove(option.value);\n            }\n            this.handleChange({\n                target: { value: this.selection.toJSON() },\n                type: 'checkbox-group'\n            });\n        },\n        mapValueToSelection(value) {\n            this.selection = this.options.filter(o => value.contains(o.value)).map(o => o.value);\n        },\n        onInit(event) {\n            emitToFormItem(this);\n            this.$watch('value', v => {\n                this.mapValueToSelection(v);\n                this.handleChange({\n                    target: { value: v.toJSON() },\n                    denyValidate: true,\n                    type: 'checkbox-group'\n                });\n            });\n            this.mapValueToSelection(this.value);\n        },\n        onReady(event) {\n            //vm.elHiddenInput = $(el).find('input:hidden');\n        },\n        onDispose(event) {\n        }\n    }\n});"]}
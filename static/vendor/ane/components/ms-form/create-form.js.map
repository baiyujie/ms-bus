{"version":3,"sources":["/vendor/ane/components/ms-form/create-form.ts"],"names":[],"mappings":"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","file":"create-form.js","sourcesContent":["import * as avalon from 'avalon2';\nimport * as Schema from 'async-validator';\n\nexport function createForm(options?) {\n    return new Form(options);\n}\n\nconst defaultOptions = {\n    record: {},\n    autoAsyncChange: true,\n    onFieldsChange: avalon.noop\n};\n\nfunction Form(options) {\n    this.cachedRecord = {};\n    this.fields = {};\n    this.all = {};\n    avalon.mix(this, defaultOptions, options)\n}\n\nForm.prototype.setFieldsValue = function (fields) {\n    if (!this.autoAsyncChange) {\n        Object.keys(fields).forEach((name) => {\n            setValue(this.cachedRecord, name, fields[name].value);\n        });\n        return ;\n    }\n\n    Object.keys(fields).forEach((name) => {\n        const field = fields[name];\n\n        setValue(this.record, name, field.value);\n\n        if (!field.denyValidate && this.fields[name]) {\n            this.validateField(name, this.fields[name]).then(result => {\n                if (result.isOk) {\n                    this.trigger('error' + result.name, []);\n                } else {\n                    this.trigger('error' + result.name, [{\n                        message: result.message\n                    }]);\n                }\n            });\n        }\n    });\n    this.onFieldsChange(fields, this.record);\n}\n\nForm.prototype.addFields = function (fields) {\n    Object.keys(fields).forEach(name => {\n        this.fields[name] = fields[name];\n    });\n}\n\nForm.prototype.on = function (type: string, listener) {\n    (this.all[type] || (this.all[type] = [])).push(listener);\n}\n\nForm.prototype.trigger = function (type: string, payload) {\n    (this.all[type] || []).map(handler => { handler(payload) });\n}\n\nForm.prototype.validateField = async function (fieldName, field) {\n    const rules = field.rules;\n    const value = getValue(this.record, fieldName);\n    let result: any = { isOk: true, name: fieldName };\n    if (!rules) return result;\n    const validator = new Schema({\n        [fieldName]: rules\n    });\n    result = await new Promise((resolve, reject) => {\n        validator.validate({ [fieldName]: value }, (errors, fields) => {\n            if (errors) {\n                resolve({\n                    isOk: false, name: fieldName, message: errors[0].message\n                });\n            } else {\n                resolve({\n                    isOk: true, name: fieldName\n                });\n            }\n        });\n    });\n    return result;\n}\n\nForm.prototype.validateFields = function (fields = this.fields) {\n    const flatRecord = {}, ruleMap = {};\n    if (!this.autoAsyncChange) {\n        this.record = avalon.mix(true, {}, this.record, this.cachedRecord);\n    }\n    Object.keys(fields).map(name => {\n        ruleMap[name] = fields[name].rules;\n        flatRecord[name] = getValue(this.record, name);\n    });\n    const validator = new Schema(ruleMap);\n    return new Promise((resolve, reject) => {\n        validator.validate(flatRecord, (errors, fields) => {\n            const errorFields = Object.keys(fields || {});\n            let isAllValid = true;\n            Object.keys(this.fields).map(name => {\n                if (~errorFields.indexOf(name)) {\n                    isAllValid = false;\n                    this.trigger('error' + name, fields[name]);\n                } else {\n                    this.trigger('error' + name, []);\n                }\n            });\n            resolve(isAllValid);\n        })\n    });\n}\n\nForm.prototype.resetFields = function (fields = this.fields) {\n    this.record = {};\n    this.trigger('reset', fields);\n}\n\n/**\n * 根据表达式构给对象赋值，属性路径中最多只允许存在一个数组\n * @param {*} record 数据对象\n * @param {String} expr 对象属性路径表达式\n * @param {*} val 值\n */\nfunction setValue(record, expr, val) {\n    const rSplit = /\\.|\\].|\\[|\\]/;\n    let temp = record, prop;\n    expr = expr.split(rSplit).filter(prop => !!prop);\n    const valType = Object.prototype.toString.call(val);\n    let mirrorVal;\n    if (valType == '[object Array]') {\n        mirrorVal = avalon.mix(true, {}, { t: val }).t;\n    } else if (valType == '[object Object]') {\n        mirrorVal = avalon.mix(true, {}, val);\n    } else {\n        mirrorVal = val;\n    }\n\n    while (prop = expr.shift()) {\n        if (expr.length === 0) {\n            temp[prop] = mirrorVal;\n        } else {\n            temp = temp[prop] = temp[prop] || {};\n        }\n    }\n}\n\n/**\n * 根据表达式构从对象取值，属性路径中最多只允许存在一个数组\n * @param {*} record 数据对象\n * @param {String} expr 对象属性路径表达式\n */\nfunction getValue(record, expr) {\n    const rSplit = /\\.|\\].|\\[|\\]/;\n    let temp = record, prop;\n    expr = expr.split(rSplit).filter(prop => !!prop);\n    while ((prop = expr.shift()) && temp) {\n        temp = temp[prop];\n    }\n    return temp;\n}"]}
{"version":3,"sources":["/vendor/ane/components/ms-datepicker/ms-datepicker.ts"],"names":[],"mappings":"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","file":"ms-datepicker.js","sourcesContent":["import * as avalon from 'avalon2';\nimport * as moment from 'moment';\nimport controlComponent from '../ms-form/ms-control';\nimport '../ms-trigger';\nimport '../ms-calendar';\nimport { emitToFormItem } from '../ms-form/utils';\n\n/**\n * 日期选择组件\n * @prop value 组件值(inherit)\n * @prop col 字段路径(inherit)\n * @prop format 日期格式，参考 momentjs\n * @prop startDate 控制可已选择的时间的开始日期，日期字符串，格式与 format 参数匹配，设置此项自动忽略 disabledDate\n * @prop endDate 控制可已选择的时间的结束日期，日期字符串，格式与 format 参数匹配，设置此项自动忽略 disabledDate\n * @prop disabledDate 不可选择日期的判断函数，传入 current（当前遍历日期），返回 true 表示此日期不可选\n * \n * @example\n * ``` html\n * \n * ```\n */\ncontrolComponent.extend({\n    displayName: 'ms-datepicker',\n    template: __inline('./ms-datepicker.html'),\n    defaults: {\n        selected: '',\n        format: 'YYYY-MM-DD',\n        startDate: '',\n        endDate: '',\n        disabledDate() { return false; },\n        withInBox(el) {\n            return this.$element === el || avalon.contains(this.$element, el);\n        },\n        getTarget() {\n            return this.$element;\n        },\n        handleClick(e) {\n            if (!this.panelVisible) {\n                avalon.vmodels[this.panelVmId].reset();\n                this.panelVisible = true;\n            } else {\n                this.panelVisible = false;\n            }\n        },\n\n        panelVmId: '',\n        panelVisible: false,\n        panelClass: 'ane-datepicker-panel-container',\n        panelTemplate: __inline('./ms-datepicker-panel.html'),\n        handlePanelHide() {\n            this.panelVisible = false;\n        },\n\n        mapValueToSelected(value) {\n            this.selected = value;\n        },\n        onInit: function (event) {\n            const self = this;\n            emitToFormItem(this);\n            this.$watch('value', v => {\n                this.mapValueToSelected(v);\n                this.handleChange({\n                    target: { value: v },\n                    denyValidate: true,\n                    type: 'changed'\n                });\n            });\n            this.panelVmId = this.$id + '_panel';\n            const innerVm = avalon.define({\n                $id: this.panelVmId,\n                currentDateArray: [],\n                $moment: moment(),\n                currentMonth: '',\n                currentYear: 0,\n                $startDate: null,\n                $endDate: null,\n                disabledDate() { return false; },\n                // 0-月视图，1-年视图，2-十年视图，3-百年视图\n                viewMode: 0,\n                staged: 0,\n                $computed: {\n                    startOfDecade() {\n                        return this.currentYear - this.currentYear % 10;\n                    },\n                    startOfCentury() {\n                        return this.currentYear - this.currentYear % 100;\n                    },\n                },\n                reset() {\n                    this.viewMode = 0;\n                    this.staged = 0;\n                    this.$moment = self.selected ? moment(self.selected, self.format) : moment();\n                    this.currentMonth = this.$moment.format('MMM');\n                    this.currentYear = this.$moment.year();\n                    this.currentDateArray = this.$moment.toArray();\n                    \n                    // 构造不可选择日期的判断函数\n                    if (self.startDate) {\n                        this.$startDate = moment(self.startDate, self.format);\n                    }\n                    if (self.endDate) {\n                        this.$endDate = moment(self.endDate, self.format);\n                    }\n                    if (self.startDate || self.endDate) {\n                        // 如果设置了开始日期和结束日期，则据此构造一个判断函数\n                        this.disabledDate = (current) => {\n                            if (this.$startDate === null && this.$endDate === null) {\n                                return false;\n                            }\n                            const currentMoment = moment(current);\n                            const isSameOrAfterStartDate = currentMoment.isSameOrAfter(this.$startDate, 'date');\n                            const isSameOrBeforeEndDate = currentMoment.isSameOrBefore(this.$endDate, 'date');\n                            if (this.$startDate === null) {\n                                return !isSameOrBeforeEndDate;\n                            }\n                            if (this.$endDate === null) {\n                                return !isSameOrAfterStartDate;\n                            }\n                            return !(isSameOrAfterStartDate && isSameOrBeforeEndDate);\n                        };\n                    } else {\n                        // 否则使用默认的或者外部传进来的判断函数\n                        this.disabledDate = self.disabledDate;\n                    }\n                },\n                changeView(viewMode) {\n                    if (this.viewMode === 0 && viewMode === 2) {\n                        // 从月视图直接跳到十年视图后，返回时跳过年视图\n                        this.staged = 1;\n                    }\n                    this.viewMode = viewMode;\n                },\n                handleYearViewSelect(el) {\n                    if (this.viewMode === 1) {\n                        this.currentMonth = el.value;\n                        this.$moment.month(el.value);\n                        this.currentDateArray = this.$moment.toArray();\n                    }\n                    if (this.viewMode === 3) {\n                        this.currentYear = el.value;\n                        this.$moment.year(el.value);\n                        this.currentDateArray = this.$moment.toArray();\n                    }\n                    if (this.viewMode === 2) {\n                        this.currentYear = el.value;\n                        this.$moment.year(el.value);\n                        this.currentDateArray = this.$moment.toArray();\n                        this.viewMode = this.viewMode - 1 - this.staged;\n                        this.staged = 0;\n                    } else {\n                        this.viewMode = this.viewMode - 1;\n                    }\n                },\n                mutate(action, ...args) {\n                    this.$moment[action].apply(this.$moment, args);\n                    this.currentMonth = this.$moment.format('MMM');\n                    this.currentYear = this.$moment.year();\n                    this.currentDateArray = this.$moment.toArray();\n                },\n                handleCalendarChange(e) {\n                    this.$moment = e.target.value;\n                    self.selected = this.$moment.format(self.format);\n                    self.panelVisible = false;\n                    self.handleChange({\n                        target: { value: self.selected },\n                        type: 'datepicker-changed'\n                    });\n                }\n            });\n            innerVm.reset();\n\n            this.mapValueToSelected(this.value);\n        },\n        onDispose() {\n            delete avalon.vmodels[this.panelVmId];\n        }\n    }\n});"]}